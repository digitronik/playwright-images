name: Build on Playwright Release

on:
  # Monitor Playwright releases
  repository_dispatch:
    types: [playwright-release]
  
  # Manual trigger with version input
  workflow_dispatch:
    inputs:
      playwright_version:
        description: 'Playwright version to build (e.g., 1.52.0)'
        required: true
        type: string
      browsers:
        description: 'Browsers to build (ignored - all browsers built by default)'
        required: false
        default: 'all'
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: digitronik/playwright-vnc

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      playwright-version: ${{ steps.validate.outputs.playwright-version }}
      browsers: ${{ steps.validate.outputs.browsers }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          chmod +x scripts/get-playwright-version.sh

      - name: Validate and normalize inputs
        id: validate
        run: |
          # Determine Playwright version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PLAYWRIGHT_VERSION="${{ github.event.inputs.playwright_version }}"
            BROWSERS="${{ github.event.inputs.browsers }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            PLAYWRIGHT_VERSION="${{ github.event.client_payload.version }}"
            BROWSERS="firefox,chromium,chrome,all"  # Build all on automatic release
          else
            echo "‚ùå Unknown trigger event"
            exit 1
          fi
          
          # Validate version format (should be semver like 1.52.0)
          if ! echo "$PLAYWRIGHT_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "‚ùå Invalid version format: $PLAYWRIGHT_VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.52.0)"
            exit 1
          fi
          
          # Verify version exists in Playwright releases
          echo "üîç Verifying Playwright version $PLAYWRIGHT_VERSION exists..."
          if ! scripts/get-playwright-version.sh details "$PLAYWRIGHT_VERSION" > /dev/null; then
            echo "‚ùå Playwright version $PLAYWRIGHT_VERSION not found"
            exit 1
          fi
          
          echo "‚úÖ Validated inputs:"
          echo "   Playwright Version: $PLAYWRIGHT_VERSION"
          echo "   Browsers: All browsers will be built (firefox, chromium, chrome, all)"
          
          echo "playwright-version=$PLAYWRIGHT_VERSION" >> $GITHUB_OUTPUT

  build-images:
    needs: validate-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [firefox, chromium, chrome, all]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # Version-specific tags
            type=raw,value=${{ matrix.browser }}-${{ needs.validate-version.outputs.playwright-version }},enable=${{ matrix.browser != 'all' }}
            type=raw,value=${{ needs.validate-version.outputs.playwright-version }},enable=${{ matrix.browser == 'all' }}
            # Latest tags
            type=raw,value=${{ matrix.browser }}-latest,enable=${{ matrix.browser != 'all' }}
            type=raw,value=latest,enable=${{ matrix.browser == 'all' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.multibuild
          target: ${{ matrix.browser }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PLAYWRIGHT_VERSION=${{ needs.validate-version.outputs.playwright-version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=pw-${{ needs.validate-version.outputs.playwright-version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test built image
        run: |
          # Quick smoke test
          if [ "${{ matrix.browser }}" = "all" ]; then
            TEST_TAG="${{ needs.validate-version.outputs.playwright-version }}"
          else
            TEST_TAG="${{ matrix.browser }}-${{ needs.validate-version.outputs.playwright-version }}"
          fi
          echo "Testing ${{ env.IMAGE_NAME }}:$TEST_TAG"
          docker run --rm -d --name test-container \
            -p 5900:5900 -p 3000:3000 \
            ${{ env.IMAGE_NAME }}:$TEST_TAG
          
          # Wait for services to start
          sleep 15
          
          # Check VNC port
          if nc -z localhost 5900; then
            echo "‚úÖ VNC port accessible"
          else
            echo "‚ùå VNC port not accessible"
            docker logs test-container
            exit 1
          fi
          
          # Check Playwright server port  
          if nc -z localhost 3000; then
            echo "‚úÖ Playwright server port accessible"
          else
            echo "‚ùå Playwright server port not accessible"
            docker logs test-container
            exit 1
          fi
          
          # Optional: Test browser launch (for 'all' variant only to avoid redundancy)
          if [ "${{ matrix.browser }}" = "all" ]; then
            echo "üß™ Testing browser launch..."
            timeout 30s docker exec test-container node -e "
              const playwright = require('playwright');
              (async () => {
                try {
                  const browser = await playwright.chromium.launch({ headless: false });
                  console.log('‚úÖ Browser launched successfully');
                  await browser.close();
                } catch (error) {
                  console.log('‚ùå Browser launch failed:', error.message);
                  process.exit(1);
                }
              })();
            "
          fi
          
          # Cleanup
          docker stop test-container

  create-release-notification:
    needs: [validate-version, build-images]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Playwright release details
        id: release-info
        run: |
          chmod +x scripts/get-playwright-version.sh
          RELEASE_INFO=$(scripts/get-playwright-version.sh details "${{ needs.validate-version.outputs.playwright-version }}")
          
          RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url // "https://github.com/microsoft/playwright/releases"')
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name // "Playwright ${{ needs.validate-version.outputs.playwright-version }}"')
          PUBLISHED_DATE=$(echo "$RELEASE_INFO" | jq -r '.published_at // "" | strftime("%Y-%m-%d")')
          
          echo "release-url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "release-name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "published-date=$PUBLISHED_DATE" >> $GITHUB_OUTPUT

      - name: Create detailed release summary
        run: |
          cat << EOF > release-notification.md
          # üé≠ New Playwright Images Built!
          
          ## üìÖ Release Information
          - **Playwright Version**: ${{ needs.validate-version.outputs.playwright-version }}
          - **Release**: [${{ steps.release-info.outputs.release-name }}](${{ steps.release-info.outputs.release-url }})
          - **Published**: ${{ steps.release-info.outputs.published-date }}
          - **Built**: $(date -u +%Y-%m-%d\ %H:%M\ UTC)
          
          ## üê≥ New Images Available
          
          ### Version-Specific Tags
          - \`${{ env.IMAGE_NAME }}:firefox-${{ needs.validate-version.outputs.playwright-version }}\`
          - \`${{ env.IMAGE_NAME }}:chromium-${{ needs.validate-version.outputs.playwright-version }}\`
          - \`${{ env.IMAGE_NAME }}:chrome-${{ needs.validate-version.outputs.playwright-version }}\`
          - \`${{ env.IMAGE_NAME }}:${{ needs.validate-version.outputs.playwright-version }}\`
          
          ### Updated Latest Tags  
          - \`${{ env.IMAGE_NAME }}:firefox-latest\`
          - \`${{ env.IMAGE_NAME }}:chromium-latest\`
          - \`${{ env.IMAGE_NAME }}:chrome-latest\`
          - \`${{ env.IMAGE_NAME }}:latest\` (all browsers)
          
          ## üöÄ Usage
          
          ### Quick Start (All Browsers)
          \`\`\`bash
          docker run -p 5900:5900 -p 3000:3000 ${{ env.IMAGE_NAME }}:all-latest
          \`\`\`
          
          ### Specific Browser
          \`\`\`bash
          # Firefox
          docker run -p 5900:5900 -p 3000:3000 ${{ env.IMAGE_NAME }}:firefox-latest
          
          # Chrome  
          docker run -p 5900:5900 -p 3000:3000 ${{ env.IMAGE_NAME }}:chrome-latest
          
          # Chromium
          docker run -p 5900:5900 -p 3000:3000 ${{ env.IMAGE_NAME }}:chromium-latest
          \`\`\`
          
          ### Connect via VNC
          \`\`\`bash
          vncviewer localhost:5900
          \`\`\`
          
          ---
          **Trigger**: ${{ github.event_name }}  
          **Commit**: ${{ github.sha }}  
          **Workflow**: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF

      - name: Create GitHub issue for release notification
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const notification = fs.readFileSync('release-notification.md', 'utf8');
            
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üé≠ Playwright ${{ needs.validate-version.outputs.playwright-version }} Images Released`,
              body: notification,
              labels: ['release', 'automation', 'playwright']
            });
            
            console.log(`Created issue: ${issue.html_url}`);
