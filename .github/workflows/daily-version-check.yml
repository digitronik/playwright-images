name: Daily Playwright Version Check & Build

on:
  schedule:
    # Run daily at 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if version already exists in Docker Hub'
        type: boolean
        default: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: digitronik/playwright-vnc

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version-check.outputs.new-version }}
      latest-version: ${{ steps.version-check.outputs.latest-version }}
      should-build: ${{ steps.version-check.outputs.should-build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          chmod +x scripts/get-playwright-version.sh

      - name: Check for new Playwright version
        id: version-check
        run: |
          # Get the latest Playwright version
          LATEST_VERSION=$(scripts/get-playwright-version.sh latest)
          echo "Latest Playwright version: $LATEST_VERSION"
          
          # Check if this version already exists in Docker Hub
          REPO_TAGS_URL="https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags?page_size=100"
          VERSION_EXISTS="false"
          
          if TAGS_RESPONSE=$(curl -s "$REPO_TAGS_URL"); then
            if echo "$TAGS_RESPONSE" | jq -r '.results[]?.name' | grep -q "^${LATEST_VERSION}$"; then
              VERSION_EXISTS="true"
              echo "‚úÖ Version $LATEST_VERSION already exists in Docker Hub"
            else
              echo "‚ùå Version $LATEST_VERSION not found in Docker Hub"
            fi
          else
            echo "‚ö†Ô∏è Could not check Docker Hub, proceeding with build"
          fi
          
          # Determine if we should build
          SHOULD_BUILD="false"
          if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
            echo "üî® Force build requested - building regardless of existing version"
            SHOULD_BUILD="true"
          elif [ "$VERSION_EXISTS" = "false" ]; then
            echo "New version $LATEST_VERSION will be built"
            SHOULD_BUILD="true"
          else
            echo "Version $LATEST_VERSION already built - skipping build"
            SHOULD_BUILD="false"
          fi
          
          # Set outputs
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "new-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

  build-images:
    needs: check-version
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [firefox, chromium, chrome, all]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # Version-specific tags
            type=raw,value=${{ matrix.browser }}-${{ needs.check-version.outputs.new-version }},enable=${{ matrix.browser != 'all' }}
            type=raw,value=${{ needs.check-version.outputs.new-version }},enable=${{ matrix.browser == 'all' }}
            # Latest tags
            type=raw,value=${{ matrix.browser }}-latest,enable=${{ matrix.browser != 'all' }}
            type=raw,value=latest,enable=${{ matrix.browser == 'all' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.multibuild
          target: ${{ matrix.browser }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PLAYWRIGHT_VERSION=${{ needs.check-version.outputs.new-version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=pw-${{ needs.check-version.outputs.new-version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test built image
        run: |
          # Quick smoke test to ensure the image starts
          if [ "${{ matrix.browser }}" = "all" ]; then
            TEST_TAG="${{ env.IMAGE_NAME }}:latest"
          else
            TEST_TAG="${{ env.IMAGE_NAME }}:${{ matrix.browser }}-latest"
          fi
          echo "Testing $TEST_TAG"
          docker run --rm -d --name test-container \
            -p 5900:5900 -p 3000:3000 \
            $TEST_TAG
          
          # Wait a bit for services to start
          sleep 10
          
          # Check if VNC port is accessible
          if nc -z localhost 5900; then
            echo "‚úÖ VNC port accessible"
          else
            echo "‚ùå VNC port not accessible"
            exit 1
          fi
          
          # Check if Playwright server is accessible
          if nc -z localhost 3000; then
            echo "‚úÖ Playwright server port accessible"
          else
            echo "‚ùå Playwright server port not accessible"
            exit 1
          fi
          
          # Cleanup
          docker stop test-container

  create-release:
    needs: [check-version, build-images]
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release summary
        run: |
          cat << EOF > release-summary.md
          # Playwright Images Release - v${{ needs.check-version.outputs.new-version }}
          
          ## üé≠ New Playwright Version
          **Playwright**: ${{ needs.check-version.outputs.new-version }}
          
          ## üì¶ Available Images
          - \`${{ env.IMAGE_NAME }}:firefox-${{ needs.check-version.outputs.new-version }}\`
          - \`${{ env.IMAGE_NAME }}:chromium-${{ needs.check-version.outputs.new-version }}\`
          - \`${{ env.IMAGE_NAME }}:chrome-${{ needs.check-version.outputs.new-version }}\`
          - \`${{ env.IMAGE_NAME }}:${{ needs.check-version.outputs.new-version }}\`
          
          ## üè∑Ô∏è Latest Tags (updated)
          - \`${{ env.IMAGE_NAME }}:firefox-latest\`
          - \`${{ env.IMAGE_NAME }}:chromium-latest\`
          - \`${{ env.IMAGE_NAME }}:chrome-latest\`
          - \`${{ env.IMAGE_NAME }}:latest\` (all browsers)
          
          ## üöÄ Quick Start
          \`\`\`bash
          # Run with all browsers available
          docker run -p 5900:5900 -p 3000:3000 ${{ env.IMAGE_NAME }}:latest
          
          # Connect via VNC
          vncviewer localhost:5900
          \`\`\`
          
          Built from commit: ${{ github.sha }}
          EOF

      - name: Comment on commit
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('release-summary.md', 'utf8');
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: summary
            });
