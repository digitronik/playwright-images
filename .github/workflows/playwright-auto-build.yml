name: üé≠ Playwright Auto Build & Deploy

on:
  schedule:
    # Run daily at 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      playwright_version:
        description: 'Specific Playwright version to build (e.g., 1.55.0)'
        required: false
        type: string
      force_build:
        description: 'Force build even if version already exists'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: digitronik/playwright-vnc

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    outputs:
      version-built: ${{ steps.version-check.outputs.version-built }}
      playwright-version: ${{ steps.version-check.outputs.playwright-version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Playwright version to build
        id: version-check
        run: |
          if [ -n "${{ github.event.inputs.playwright_version }}" ]; then
            # Manual trigger with specific version
            VERSION="${{ github.event.inputs.playwright_version }}"
            echo "üìå Manual build requested for Playwright v${VERSION}"
          else
            # Auto-detect latest version
            VERSION=$(./scripts/get-playwright-version.sh latest)
            echo "üîç Latest Playwright version: ${VERSION}"
          fi
          
          echo "playwright-version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Check if this version already exists on Docker Hub (unless force_build is true)
          if [ "${{ github.event.inputs.force_build }}" != "true" ]; then
            echo "üîç Checking if images already exist for v${VERSION}..."
            
            # Check if the main image exists
            if docker manifest inspect ${IMAGE_NAME}:${VERSION} >/dev/null 2>&1; then
              echo "‚ÑπÔ∏è Images for Playwright v${VERSION} already exist. Skipping build."
              echo "version-built=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "üöÄ Building images for Playwright v${VERSION}"
          echo "version-built=true" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.version-check.outputs.version-built == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.version-check.outputs.version-built == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        if: steps.version-check.outputs.version-built == 'true'
        run: |
          VERSION="${{ steps.version-check.outputs.playwright-version }}"
          
          echo "üèóÔ∏è Building all browser variants for Playwright v${VERSION}"
          
          # Build all variants
          ./build.sh --playwright-version "${VERSION}" --latest --repo "${{ env.IMAGE_NAME }}"
          
          echo "‚úÖ All images built and pushed successfully"

      - name: Test images
        if: steps.version-check.outputs.version-built == 'true'
        run: |
          VERSION="${{ steps.version-check.outputs.playwright-version }}"
          
          echo "üß™ Testing built images..."
          
          # Test each variant can be pulled
          for variant in firefox chromium chrome; do
            echo "Testing ${IMAGE_NAME}:${variant}-${VERSION}"
            docker run --rm "${IMAGE_NAME}:${variant}-${VERSION}" /bin/bash -c "echo 'Image ${variant} OK'"
          done
          
          # Test all-browsers image
          echo "Testing ${IMAGE_NAME}:${VERSION}"
          docker run --rm "${IMAGE_NAME}:${VERSION}" /bin/bash -c "echo 'All-browsers image OK'"
          
          echo "‚úÖ All image tests passed"

      - name: Update README with latest release info
        if: steps.version-check.outputs.version-built == 'true'
        run: |
          VERSION="${{ steps.version-check.outputs.playwright-version }}"
          CURRENT_DATE=$(date -u "+%Y-%m-%d %H:%M UTC")
          
          echo "üìù Updating README with Playwright v${VERSION} info..."
          
          # Create the new release info section
          cat > release_info_new.md << EOF
          **Current Playwright Version:** \`${VERSION}\`  
          **Released:** ${CURRENT_DATE}  

          ### üê≥ Available Images
          - \`digitronik/playwright-vnc:latest\` (all browsers)
          - \`digitronik/playwright-vnc:firefox-latest\`
          - \`digitronik/playwright-vnc:chromium-latest\`
          - \`digitronik/playwright-vnc:chrome-latest\`

          ### üì¶ Version-Specific Tags
          - \`digitronik/playwright-vnc:${VERSION}\`
          - \`digitronik/playwright-vnc:firefox-${VERSION}\`
          - \`digitronik/playwright-vnc:chromium-${VERSION}\`
          - \`digitronik/playwright-vnc:chrome-${VERSION}\`

          ### üöÄ Quick Start
          \`\`\`bash
          # Run with all browsers available
          docker run -p 5900:5900 -p 3000:3000 digitronik/playwright-vnc:latest

          # Connect via VNC
          vncviewer localhost:5900
          \`\`\`

          *Last updated: ${CURRENT_DATE} (automated)*
          EOF
          
          # Replace the section in README.md
          # First, extract everything before the start marker
          sed -n '1,/<!-- RELEASE_INFO_START -->/p' README.md > readme_temp.md
          
          # Add the start marker and new content
          echo "<!-- RELEASE_INFO_START -->" >> readme_temp.md
          cat release_info_new.md >> readme_temp.md
          echo "<!-- RELEASE_INFO_END -->" >> readme_temp.md
          
          # Add everything after the end marker
          sed -n '/<!-- RELEASE_INFO_END -->/,$p' README.md | tail -n +2 >> readme_temp.md
          
          # Replace the original README
          mv readme_temp.md README.md
          
          # Cleanup
          rm -f release_info_new.md
          
          echo "‚úÖ README updated with latest release info"

      - name: Commit and push README changes
        if: steps.version-check.outputs.version-built == 'true'
        run: |
          VERSION="${{ steps.version-check.outputs.playwright-version }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet README.md; then
            echo "‚ÑπÔ∏è No changes to README"
          else
            git add README.md
            git commit -m "docs: Update README with Playwright v${VERSION} release info

            üé≠ Playwright v${VERSION} Images Available
            
            ‚úÖ New Docker images:
            - digitronik/playwright-vnc:${VERSION}
            - digitronik/playwright-vnc:firefox-${VERSION}
            - digitronik/playwright-vnc:chromium-${VERSION}
            - digitronik/playwright-vnc:chrome-${VERSION}
            
            ü§ñ Automated update via GitHub Actions"
            
            git push
            echo "‚úÖ README changes committed and pushed"
          fi

      - name: Summary
        if: always()
        run: |
          VERSION="${{ steps.version-check.outputs.playwright-version }}"
          
          if [ "${{ steps.version-check.outputs.version-built }}" == "true" ]; then
            echo "üéâ SUCCESS: Playwright v${VERSION} images built and deployed!"
            echo ""
            echo "üì¶ Available images:"
            echo "   - digitronik/playwright-vnc:latest"
            echo "   - digitronik/playwright-vnc:${VERSION}"
            echo "   - digitronik/playwright-vnc:firefox-${VERSION}"
            echo "   - digitronik/playwright-vnc:chromium-${VERSION}" 
            echo "   - digitronik/playwright-vnc:chrome-${VERSION}"
            echo ""
            echo "üìù README updated automatically"
          else
            echo "‚ÑπÔ∏è No build needed - Playwright v${VERSION} images already exist"
          fi
